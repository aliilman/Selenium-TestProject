// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('demo3', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('demo3', async function() {
    await driver.get("https://demoqa.com/sortable")
    // await driver.manage().window().setRect({ width: 1152, height: 924 })
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".col-md-6")).click()
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(1)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".vertical-list-container")).click()
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(1)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".vertical-list-container")).click()
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".col-md-6")).click()
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(1)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".vertical-list-container")).click()
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(1)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".vertical-list-container > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".vertical-list-container")).click()
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".col-md-6"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".col-md-6")).click()
    // await driver.findElement(By.id("demo-tab-grid")).click()
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(1)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(2)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(2)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".create-grid")).click()
    // {
    //   const element = await driver.findElement(By.css(".create-grid"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".create-grid")).click()
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(2)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(5)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(5)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".create-grid")).click()
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(3)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(6)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".create-grid")).click()
    // {
    //   const element = await driver.findElement(By.css(".grid-container"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".grid-container"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".grid-container"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".grid-container")).click()
    // {
    //   const element = await driver.findElement(By.css(".create-grid > .list-group-item:nth-child(5)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".list-group-item:nth-child(7)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".list-group-item:nth-child(7)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".create-grid")).click()
    // {
    //   const element = await driver.findElement(By.css(".list-group-item:nth-child(8)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".list-group-item:nth-child(9)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css(".list-group-item:nth-child(9)"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.css(".create-grid")).click()

    await driver.findElement(By.css(".show #item-1")).click()
    await driver.findElement(By.css(".mt-2:nth-child(2)")).click()
    await driver.findElement(By.css(".mt-2:nth-child(3)")).click()
    await driver.findElement(By.css(".mt-2:nth-child(4)")).click()
    await driver.findElement(By.css(".mt-2:nth-child(1)")).click()
    await driver.findElement(By.id("demo-tab-grid")).click()
    await driver.findElement(By.css("#row1 > .list-group-item:nth-child(1)")).click()
    await driver.findElement(By.css("#row1 > .list-group-item:nth-child(2)")).click()
    await driver.findElement(By.css("#row1 > .list-group-item:nth-child(3)")).click()
    await driver.findElement(By.css("#row2 > .list-group-item:nth-child(1)")).click()
    await driver.findElement(By.css("#row2 > .list-group-item:nth-child(2)")).click()
    await driver.findElement(By.css("#row2 > .list-group-item:nth-child(3)")).click()
    await driver.findElement(By.css("#row3 > .list-group-item:nth-child(3)")).click()
    await driver.findElement(By.css("#row3 > .list-group-item:nth-child(1)")).click()
    await driver.findElement(By.css("#row3 > .list-group-item:nth-child(2)")).click()



    // await driver.findElement(By.css(".show #item-2")).click()
    // await driver.findElement(By.css(".resizable-container")).click()


    // {
    //   const element = await driver.findElement(By.css("#resizable > .react-resizable-handle"))
    //   await driver.actions({ bridge: true }).move(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.css("#resizable > .react-resizable-handle"))
    //   await driver.actions({ bridge: true }).move(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.css("#resizable > .react-resizable-handle"))
    //   await driver.actions({ bridge: true }).move(element).release().perform()
    // }
    // await driver.findElement(By.css("#resizable > .react-resizable-handle")).click()


    // await driver.findElement(By.css(".show #item-3")).click()
    // {
    //   const element = await driver.findElement(By.id("draggable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("draggable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("draggable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("draggable")).click()
    // await driver.findElement(By.id("droppableExample-tab-accept")).click()
    // {
    //   const element = await driver.findElement(By.id("acceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("acceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("acceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("acceptable")).click()
    // {
    //   const element = await driver.findElement(By.id("notAcceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("notAcceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("notAcceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("notAcceptable")).click()
    // {
    //   const element = await driver.findElement(By.id("notAcceptable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("acceptDropContainer"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("acceptDropContainer"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("notAcceptable")).click()
    // await driver.findElement(By.id("droppableExample-tab-preventPropogation")).click()
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("dragBox")).click()
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("ppDropContainer"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("ppDropContainer"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("dragBox")).click()
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("dragBox"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("dragBox")).click()
    // await driver.findElement(By.id("droppableExample-tab-revertable")).click()
    // {
    //   const element = await driver.findElement(By.id("notRevertable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("notRevertable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("notRevertable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("notRevertable")).click()
    // {
    //   const element = await driver.findElement(By.id("revertable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("revertable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).perform()
    // }
    // {
    //   const element = await driver.findElement(By.id("revertable"))
    //   await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    // }
    // await driver.findElement(By.id("revertable")).click()
    await driver.findElement(By.css(".show #item-4 > .text")).click()
    {
      const element = await driver.findElement(By.id("dragBox"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("dragBox")).click()
    await driver.findElement(By.id("draggableExample-tab-axisRestriction")).click()
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".axis-restriction-container")).click()
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("restrictedX")).click()
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedX"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("restrictedX")).click()
    {
      const element = await driver.findElement(By.id("restrictedY"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("restrictedY")).click()
    {
      const element = await driver.findElement(By.id("restrictedY"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedY"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("restrictedY"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("restrictedY")).click()
    await driver.findElement(By.id("draggableExample-tab-containerRestriction")).click()
    {
      const element = await driver.findElement(By.css(".ui-draggable-dragging"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.css(".ui-draggable-dragging"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.css(".ui-draggable-dragging"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".draggable:nth-child(1)")).click()
    {
      const element = await driver.findElement(By.id("draggableExample-tabpane-containerRestriction"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("draggableExample-tabpane-containerRestriction"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("draggableExample-tabpane-containerRestriction"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("draggableExample-tabpane-containerRestriction")).click()
    {
      const element = await driver.findElement(By.css(".element-group:nth-child(5) .header-text"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.css(".element-group:nth-child(5) .header-text"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.css(".element-group:nth-child(5) .header-text"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".row")).click()
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.css(".col-md-6"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".col-md-6")).click()
    await driver.findElement(By.id("draggableExample-tab-cursorStyle")).click()
    {
      const element = await driver.findElement(By.id("cursorCenter"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("cursorCenter"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("cursorCenter"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("cursorCenter")).click()
    {
      const element = await driver.findElement(By.id("cursorTopLeft"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("cursorTopLeft"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("cursorTopLeft"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".cursor-style-container")).click()
    {
      const element = await driver.findElement(By.id("cursorTopLeft"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("cursorTopLeft"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("cursorTopLeft"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".cursor-style-container")).click()
    {
      const element = await driver.findElement(By.css(".bottom-text"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("cursorBottom"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("cursorBottom"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".cursor-style-container")).click()
    await driver.close()
  })
})
